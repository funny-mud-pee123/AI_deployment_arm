#include <iostream>
#include <stdlib.h>

#define SIZE 10
typedef int ElementType;
typedef struct Lnode* List;
struct Lnode{
    ElementType* array;//指向顺序表的底层数组
    int capacity;
    int size;
};
bool InitList(List* L_ptr)
{
    *L_ptr = (struct Lnode*)malloc(sizeof(struct Lnode));


    (*L_ptr)->array = (ElementType*)malloc(sizeof(ElementType)*SIZE);
    if((*L_ptr)->array == NULL) return 0;
    (*L_ptr)->size = 0;
    (*L_ptr)->capacity = SIZE;
    return 1;
}
bool InsertList(List L,ElementType element,int index)
{
    if(index < 0 || index > (L->size)) return 0;//插入位置不合法
    if(L->size == L->capacity){//扩容
        int newcapacity = L->capacity*2;
        ElementType* newarray = (ElementType*)realloc(L->array,sizeof(ElementType)*newcapacity);
        if(newarray==NULL)return 0;
        L->array = newarray;
        L->capacity = newcapacity;
    }
    for(int i = L->size;i>index;i--)
        L->array[i] = L->array[i-1];
    L->array[index] = element;
    L->size++;
    return 1;
}
bool DeleteList(List L,int index)
{
    if(index < 0 || index > (L->size-1)) return 0;
    for(int i = index;i<L->size-1;i++)
        L->array[i] = L->array[i+1];
    L->size--;
    return 1;
}
int SizeList(List L)//获取长度
{
    return L->size;
}

ElementType* GetList(List L,int index)//获取元素
{
    if(index < 0 || index > (L->size-1)) return NULL;
    return &L->array[index];
}
int FindList(List L,ElementType element)//查找元素的索引
{
    for(int i = 0;i<L->size;i++)
    {
        if(L->array[i]==element)return i;
    }
    return -1;//unfind
}
void PrintList(List L)
{
    for(int i = 0;i<L->size;i++)
    {
        std::cout << L->array[i] << " ";
    }
    std::cout << std::endl;
}
int main()
{
    using namespace std;
    
    List L;
    if(InitList(&L))
    {
        for(int i = 0;i<50;i++)
            InsertList(L,i+1,i);
        PrintList(L);
        cout << GetList(L,3)[0];
    }
    else
    {
        cout <<"initialize fail" << endl;
    }
    return 0;
}
